//https://www.geeksforgeeks.org/implementation-binomial-heap/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data;
    int degree;
    struct node* child, *sibling, *parent; 
    
    node(int val)
    {
        data = val;
        degree = 0;
        child = sibling = parent = nullptr;
    }
};

struct node* mergeBinomialTree(struct node* b1, struct node* b2)
{
    if(b1->data > b2->data)
        swap(b1, b2);
    
    b2->parent = b1;
    b2->sibling = b1->child;
    b1->child = b2;
    b1->degree++;
    
    return b1;
    
}

list<struct node*> adjust(list<struct node*> heap)
{
    if(heap.size() <= 1)
        return heap;
    list<struct node*> new_heap;
    list<struct node*>::iterator it1, it2, it3;
    it1 = it2 = it3 = heap.begin();
    
    if(heap.size() == 2)
    {
        it2 = it1;
        it2++;
        it3 = heap.end();
    }
    else
    {
        it2++;
        it3 = it2;
        it3++;
    }
    
    while(it1 != heap.end())
    {
        if(it2 == heap.end())
            it1++;
        else if((*it1)->degree < (*it2)->degree)
        {
            it1++;
            it2++;
            if(it3 != heap.end())
                it3++;
        }
        else if(it3 != heap.end() && ((*it1)->degree == (*it2)->degree) && ((*it1)->degree == (*it3)->degree))
        {
            it1++;
            it2++;
            it3++;
        }
        else if((*it1)->degree == (*it2)->degree)
        {
            struct node* temp;
            *it1 = mergeBinomialTree(*it1, *it2);
            it2 = heap.erase(it2);
            if(it3 != heap.end())
                it3++;
        }
    }
    return heap;
}

list<struct node*> unionBH(list<struct node*> main_list_bh, list<struct node*> new_node_list)
{
    list<struct node*> new_list_bh;
    list<struct node*>::iterator it_main = main_list_bh.begin();
    list<struct node*>::iterator ot_new = new_node_list.begin();
    
    while(it_main != main_list_bh.end() && ot_new != new_node_list.end())
    {
        if((*it_main)->degree <= (*ot_new)->degree)
        {
            new_list_bh.push_back(*it_main);
            it_main++;
        }
        else
        {
            new_list_bh.push_back(*ot_new);
            ot_new++;
        }
            
    }
    while(it_main != main_list_bh.end())
    {
        new_list_bh.push_back(*it_main);
        it_main++;
    }
    
    while(ot_new != new_node_list.end())
    {
        new_list_bh.push_back(*ot_new);
        ot_new++;
    }
    return new_list_bh;
}

list<struct node*> insertInHeap(list<struct node*> list_bh, struct node* tree_new_node)
{
    list<struct node*> temp;
    
    temp.push_back(tree_new_node);
    //cout << "call unionBH " << endl;
    temp = unionBH(list_bh, temp);
    //cout << "call adjust " << endl;
    return adjust(temp);
}

list<struct node*> insert(list<struct node*> list_bh, int val)
{
    struct node* temp = new struct node(val);
    
    return insertInHeap(list_bh, temp);
}

struct node* getMin(list<struct node*> heap)
{
    list<struct node*>::iterator it = heap.begin();
    struct node* temp = *it;
    
    while(it != heap.end())
    {
        if((*it)->data < temp->data)
            temp = *it;
        it++;
    }
    return temp;
}

list<struct node*> removeMinFromBinomialHeap(struct node* node_to_remove)
{
    list<struct node*> heap;
    struct node* temp = node_to_remove->child;
    struct node* lo;
    
    while(temp)
    {
        lo = temp;
        temp = temp->sibling;
        lo->sibling = nullptr;
        heap.push_front(lo);
    }
    return heap;
}

list<struct node*> extract_min(list<struct node*> heap)
{
    list<struct node*> new_heap, lo;
    struct node* temp;
    
    temp = getMin(heap);
    list<struct node*>::iterator it;
    it = heap.begin();
    while(it != heap.end())
    {
        if(*it != temp)
        {
            new_heap.push_back(*it);
        }
        it++;
    }
    lo = removeMinFromBinomialHeap(temp);
    
    new_heap = unionBH(new_heap, lo);
    new_heap = adjust(new_heap);
    return new_heap;
}

void printTree(struct node* tree_node)
{
    while(tree_node)
    {
        cout << tree_node->data << "  " << endl;
        printTree(tree_node->child);
        tree_node = tree_node->sibling;
    }
}

void printHeap(list<struct node*> list_bh)
{
    list<struct node*>::iterator it;
    it = list_bh.begin();
    while(it != list_bh.end())
    {
        printTree(*it);
    
        it++;
    }
}

int main() {
    list<struct node*> list_bh;
	list_bh = insert(list_bh, 10);
	list_bh = insert(list_bh, 20);
	list_bh = insert(list_bh, 30);
	list_bh = insert(list_bh, 40);
	list_bh = insert(list_bh, 50);
	
	cout << "Binomial Heap is ready" << endl;
	printHeap(list_bh);
	
	struct node* temp = getMin(list_bh);
	cout << "min element = " << temp->data << endl;
	
	list_bh = extract_min(list_bh);
	cout << " Binomial Heap after extract_min" << endl;
	list_bh = extract_min(list_bh);
	cout << " Binomial Heap after extract_min" << endl;
	list_bh = extract_min(list_bh);
	cout << " Binomial Heap after extract_min" << endl;
	printHeap(list_bh);
	return 0;
}
